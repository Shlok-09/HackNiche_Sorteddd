# -*- coding: utf-8 -*-
"""Asset Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tS2gTvz8IQVh9W-Qs_aLAL7mJ_xvqGFc
"""

import pandas as pd
import pickle

df = pd.read_excel('Dataset.xlsx')

df['Gender'] = df['Gender'].replace('M',1)
df['Gender'] = df['Gender'].replace('F',0)
df['Education'] = df['Education'].replace('UG',1)
df['Education'] = df['Education'].replace('PG',2)
df['Education'] = df['Education'].replace('Masters',3)
df['Education'] = df['Education'].replace('SSC',4)
df['Education'] = df['Education'].replace('HSC',5)
df['Education'] = df['Education'].replace('<SSC',6)
df['Profession'] = df['Profession'].replace('Student',1)
df['Profession'] = df['Profession'].replace('Manager',2)
df['Profession'] = df['Profession'].replace('Fresher',3)
df['Profession'] = df['Profession'].replace('Intern',4)
df['Profession'] = df['Profession'].replace('CEO',5)
df['Profession'] = df['Profession'].replace('Employee',6)
df['Profession'] = df['Profession'].replace('Business',7)
df['Profession'] = df['Profession'].replace('Retired',8)
df['Profession'] = df['Profession'].replace('Retired',8)
df['Maritial Status'] = df['Maritial Status'].replace('Married',1)
df['Maritial Status'] = df['Maritial Status'].replace('Single',2)
df['Maritial Status'] = df['Maritial Status'].replace('Divorced',3)
df['Children'] = df['Children'].replace('Yes',1)
df['Children'] = df['Children'].replace('No',0)

"""# Loan"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Load the iris dataset
# iris = load_iris()
features = ['Age','Gender','Education','Profession','Maritial Status','Children','Number Of Children','Income']
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[features], df[['Loans']], test_size=0.3, random_state=42)

# Instantiate the Decision Tree classifier
dtcloan = DecisionTreeClassifier()

# Fit the model to the training data
dtcloan.fit(X_train, y_train)

pickle.dump(dtcloan, open('loan.pkl','wb'))


"""# Insurance"""

features = ['Age','Gender','Education','Profession','Maritial Status','Children','Number Of Children','Income']
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[features], df[['Insurances']], test_size=0.3, random_state=42)

# Instantiate the Decision Tree classifier
dtcinsurance = DecisionTreeClassifier()

# Fit the model to the training data
dtcinsurance.fit(X_train, y_train)
# dtcstocks.fit(X_train, y_train)
print(dtcinsurance.predict(X_test))

pickle.dump(dtcinsurance, open('insurance.pkl','wb'))

"""# Policy"""

features = ['Age','Gender','Education','Profession','Maritial Status','Children','Number Of Children','Income']
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[features], df[['Policies']], test_size=0.3, random_state=42)

# Instantiate the Decision Tree classifier
dtcpolicy = DecisionTreeClassifier()

# Fit the model to the training data
dtcpolicy.fit(X_train, y_train)

pickle.dump(dtcpolicy, open('policy.pkl','wb'))

"""# Bonds"""

features = ['Age','Gender','Education','Profession','Maritial Status','Children','Number Of Children','Income']
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[features], df[['Bonds']], test_size=0.3, random_state=42)

# Instantiate the Decision Tree classifier
dtcbond = DecisionTreeClassifier()

# Fit the model to the training data
dtcbond.fit(X_train, y_train)

pickle.dump(dtcbond, open('bond.pkl','wb'))

"""# Mutual Funds"""

features = ['Age','Gender','Education','Profession','Maritial Status','Children','Number Of Children','Income']
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[features], df[['Mutual Funds']], test_size=0.3, random_state=42)

# Instantiate the Decision Tree classifier
dtcmf = DecisionTreeClassifier()

# Fit the model to the training data
dtcmf.fit(X_train, y_train)

pickle.dump(dtcmf, open('mf.pkl','wb'))

"""# Crypto"""

features = ['Age','Gender','Education','Profession','Maritial Status','Children','Number Of Children','Income']
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[features], df[['Crypto']], test_size=0.3, random_state=42)

# Instantiate the Decision Tree classifier
dtccrypto = DecisionTreeClassifier()

# Fit the model to the training data
dtccrypto.fit(X_train, y_train)

pickle.dump(dtccrypto, open('crypto.pkl','wb'))

"""# Stocks"""
features = ['Age','Gender','Education','Profession','Maritial Status','Children','Number Of Children','Income']
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[features], df[['Stocks']], test_size=0.3, random_state=42)

# Instantiate the Decision Tree classifier
dtcstocks = DecisionTreeClassifier()

# Fit the model to the training data
dtcstocks.fit(X_train, y_train)
print(dtcstocks.predict(X_test))
pickle.dump(dtcstocks, open('stocks.pkl','wb'))


# def repl(inp,col):
#   if inp in col:
#     inp = inp.replace(inp,str(col.index(inp)+1))
#   return int(inp)

# profession = ['Student','Manager','Fresher','Intern','CEO','Employee','Business','Retired']
# gender = ['M','F']
# education = ['UG','PG','Masters','SSC','HSC','<SSC']
# relation = ['Married','Single','Divorced']
# children = ['Yes','No']

# age = 27
# b = 'M'
# c = 'UG'
# d = 'Employee'
# e = 'Married'
# f =  'No'
# noc = 0
# income = 50000
# print(repl(b,gender))
# print(repl(c,education))
# print(repl(d,profession))
# print(repl(e,relation))
# print(repl(f,children))

# gen = repl(b,gender)
# edu = repl(c,education)
# prof = repl(d,profession)
# rel = repl(e,relation)
# child = repl(f,children)

# print([age,gen,c,d,e,f])

# loan = dtcloan.predict([[age,gen,edu,prof,rel,child,noc,income]])[0]
# insurance = dtcinsurance.predict([[age,gen,edu,prof,rel,child,noc,income]])[0]
# policy = dtcpolicy.predict([[age,gen,edu,prof,rel,child,noc,income]])[0]
# bond = dtcbond.predict([[age,gen,edu,prof,rel,child,noc,income]])[0]
# mutual = dtcmf.predict([[age,gen,edu,prof,rel,child,noc,income]])[0]
# crypto = dtccrypto.predict([[age,gen,edu,prof,rel,child,noc,income]])[0]
# stocks = dtcstocks.predict([[age,gen,edu,prof,rel,child,noc,income]])[0]
# print('Loan: ',loan)
# print('Insurance: ',insurance)
# print('Policy: ',policy)
# print('Bond: ',bond)
# print('Crypto: ',crypto)
# print('Stocks: ',stocks)

# if loan == 1:
#   if age<=25:
#     print('Recommend Education Loan')
#   elif age>25 and age<=35:
#     print('Recommend Car Loan')
#   elif age>35 and age<=50:
#     print('Recommend Home Loan')
#   elif age>50:
#     print('Recommend Health Loan')
# elif loan == 0:
#   print('Loan Not Recommended')

# if insurance == 1:
#   if age<=25:
#     print('Recommend Health Insurance')
#   elif age>25 and age<=50:
#     print('Recommend Motor Insurance')
#   elif age>50:
#     print('Recommend Life Insurance')
# elif insurance == 0:
#   print('Insurance Not Recommended')

# if policy == 1:
#   if age<=25:
#     print('Recommend Health Insurance')
#   elif age>25 and age<=35:
#     print('Recommend Motor Insurance')
#   elif age>35 and age<=50:
#     print('Pradhan Mantri Jan Dhan Yojana')
#   elif age>50:
#     print('Atal Pension Yojana')
# elif policy == 0:
#   print('Policy Not Recommended')

# if bond == 1:
#   if age<=25:
#     print('Recommend Health Insurance')
#   elif age>25 and age<=35:
#     print('Recommend Motor Insurance')
#   elif age>35 and age<=50:
#     print('Recommend Life Insurance')
#   elif age>50:
#     print('')
# elif bond == 0:
#   print('Bond Not Recommended')

# if mutual == 1:
#   if age<=25:
#     print('Recommend Health Insurance')
#   elif age>25 and age<=35:
#     print('Recommend Motor Insurance')
#   elif age>35 and age<=50:
#     print('Recommend Life Insurance')
#   elif age>60:
#     print('')
# elif mutual == 0:
#   print('Mutual Fund Not Recommended')

# if crypto == 1:
#   if age<=25:
#     print('Recommend Health Insurance')
#   elif age>25 and age<=35:
#     print('Recommend Motor Insurance')
#   elif age>35 and age<=50:
#     print('Recommend Life Insurance')
#   elif age>50:
#     print('')
# elif crypto == 0:
#   print('Crypto Not Recommended')

# if stocks == 1:
#   if age<=25:
#     print('Recommend Health Insurance')
#   elif age>25 and age<=35:
#     print('Recommend Motor Insurance')
#   elif age>35 and age<=50:
#     print('Recommend Life Insurance')
#   elif age>50:
#     print('')
# elif stocks == 0:
#   print('Stocks Not Recommended')

